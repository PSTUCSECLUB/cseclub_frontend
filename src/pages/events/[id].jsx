import Schedule from "@/components/schedule";
import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import { useMediaQuery } from "react-responsive";
import { events } from "@/data/eventsData";
import parse from "html-react-parser";
import { useRouter } from "next/router";
import { getEvent } from "@/actions/event";
import { InfinitySpin } from "react-loader-spinner";

export default function Event() {
  const isTabletOrMobile = useMediaQuery({ query: "(max-width: 600px)" });
  let [isMobile, setIsMobile] = useState(false);
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const router = useRouter();

  useEffect(() => {
    router.query.id &&
      getEvent(router.query.id, setLoading, setError, setEvent);
  }, [router.query.id]);

  useEffect(() => {
    setIsMobile(window.screen.width <= 600);
  }, [isMobile]);

  return (
    <>
      <Head>
        <title>Individul Event Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!event && (
        <div className="event__status__wrapper">
          {loading && (
            <div className="event__loading">
              <p>Please wait</p>
              <InfinitySpin width="150" color="#4fa94d" />
            </div>
          )}
          {error && (
            <div className="event__error">failed to load this page!</div>
          )}
        </div>
      )}
      {event && (
        <div className="event">
          <div className="event__coverimg__wrapper">
            {" "}
            {isMobile && isTabletOrMobile ? (
              <Image
                className="event__coverimg"
                src={event.coverImgPort}
                alt="event cover image"
                fill
              />
            ) : (
              <Image
                className="event__coverimg"
                src={event.coverImgLand}
                alt="event cover image"
                fill
              />
            )}
          </div>

          <main className="event__contents">
            <article className="event__article">
              {parse(event.description)}
            </article>

            {event?.childs.length > 0 && (
              <div className="event__events">
                <h3 className="event__events__title">
                  {event.title + " Events"}
                </h3>
                <div className="event__events__wrapper">
                  {event?.childs?.map((e, i) => {
                    return (
                      <div key={i} className="event__event">
                        <div className="event__event__img__wrapper">
                          <Image
                            className="event__event__img"
                            fill
                            alt={e.title + "-img"}
                            src={e.image}
                          />
                        </div>
                        <div className="event__event__texts">
                          <h3 className="event__event__title">{e.title}</h3>
                          <p className="event__event__para">
                            {e.shortDescription}
                          </p>
                          <button
                            onClick={() => {
                              router.push("/events/" + e._id);
                            }}
                            className="event__event__btn"
                          >
                            View
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
            {event?.schedules.length > 0 && (
              <div className="event__schedule__wrapper">
                <Schedule schedules={event.schedules} />
              </div>
            )}
            {event?.sponsors.length > 0 && (
              <div className="event__sponsors">
                <h3 className="event__sponsors__title">Sponsors</h3>
                <div className="event__sponsors__wrapper">
                  {event?.sponsors.map((s, i) => {
                    return (
                      <div
                        key={i}
                        className="event__sponsor"
                        onClick={() => {
                          s.site && router.push(s.site);
                        }}
                      >
                        <div className="event__sponsor__img__wrapper">
                          <Image
                            className="event__sponsor__img"
                            src={s.img}
                            alt={s.name}
                            fill
                          />
                        </div>
                        <h6 className="event__sponsor__name">{s.name}</h6>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </main>
        </div>
      )}
    </>
  );
}
